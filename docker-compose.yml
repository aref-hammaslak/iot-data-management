version: '3.8'

services:
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - default

  mongo:
    image: mongo:6.0
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - default

  backend:
    image: ghcr.io/aref-hammaslak/iot-data-management/backend:latest
    restart: always
    # wait for rabbitmq and mongo to be ready
    depends_on:
      rabbitmq:
        condition: service_healthy
      mongo:
        condition: service_healthy
    environment:
      RABBITMQ_URI: amqp://guest:guest@rabbitmq:5672
      MONGO_URI: mongodb://mongo:27017/pantohealth
    networks:
      - default
    ports:
      - "3000:3000"

  producer:
    image: ghcr.io/aref-hammaslak/iot-data-management/producer:latest
    # wait for rabbitmq to be ready
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: always
    environment:
      RABBITMQ_URI: amqp://guest:guest@rabbitmq:5672
    networks:
      - default

networks:
  default:
    driver: bridge

volumes:
  mongo_data:
    driver: local
